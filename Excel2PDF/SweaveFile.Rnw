\documentclass[a4paper,landscape]{article}
\usepackage{graphicx, verbatim}
\usepackage{amsmath}
\usepackage{amscd}
\usepackage{lipsum}
\usepackage{enumitem}
\usepackage{todonotes}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{caption}
% wrap code and output (2 packages below) 
\usepackage{listings}
\usepackage{inconsolata}
\usepackage{wrapfig}

\setlength{\textwidth}{6.5in} 
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{0in} 
\setlength{\evensidemargin}{0in}
\setlength{\topmargin}{-1.5cm}
\setlength{\parindent}{0cm}
\usepackage{setspace}
\usepackage{float}
\usepackage{hyperref}
\hypersetup{
  colorlinks   = true, %Colours links instead of ugly boxes
  urlcolor     = blue, %Colour for external hyperlinks
  linkcolor    = blue, %Colour of internal links
  citecolor   = red %Colour of citations
}
\singlespacing
\usepackage[affil-it]{authblk} 
\usepackage{etoolbox}
\usepackage{lmodern}
\usepackage[printwatermark]{xwatermark}
\newwatermark[allpages,color=red!5,angle=45,scale=3,xpos=0,ypos=0]{Confidential}
\makeatletter
\renewcommand{\maketitle}{\bgroup\setlength{\parindent}{16pt}
\begin{flushleft}
  \textbf{\@title}

  \@author
\end{flushleft}\egroup
}
%\newwatermark[allpages,color=red!5,angle=45,scale=3,xpos=0,ypos=0]{Provisional }

\renewcommand\Authfont{\fontsize{14}{18.4}\selectfont}
\makeatother


\begin{document}

\title{\large Interactive Report \\
\textbf{R-based document}}

\author{\ \\ Eyad Elyan,}
\maketitle
\begin{flushleft} \today \end{flushleft} 
\noindent\rule{16cm}{0.4pt}
\ 




<<echo=FALSE,warning=FALSE,message=FALSE>>=

require(openxlsx);
require(readxl)
library(stringr);library(data.table)
library(XLConnect)
library(xtable)

grades <- numeric(7)

computeGrade <- function(mark=0) { 

    grades ='A'
    if (mark>=4.5) 
        grades='A'
    else if (mark >=3.5)
        grades='B'
    else if (mark>=2.5)
        grades = 'C'
    else if (mark >= 1.5)
        grades = 'D'
    else if (mark >=.5)
        grades='E'
    else grades = 'F'
    grades
}
updateGrades <- function (x){
    if (x=='A'){
        grades[1] = grades[1]+1
    }
    else if (x=='B')
        grades[2]=grades[2]+1
    else if (x=='C')
        grades[3]=grades[3]+1
    else if (x=='D')
        grades[4]=grades[4]+1
    else if (x=='E')
        grades[5]=grades[5]+1
    else if (x=='F')
        grades[6]=grades[6]+1
    else
        grades[7]=grades[7]+1
    
}

# Sheets names 
fileName <- '../Data/Data.xlsx'
sheets <- readxl::excel_sheets(fileName)
dfSheets <- data.frame(Sheet=character(), Rows=numeric(),Cols=numeric(),
                       Subject=numeric(),Type=character(),Weight=numeric())
dfs <- readWorksheet(loadWorkbook("../Data/Data.xlsx"),sheet=1)
for (i in 1:length(sheets)) {
    # read sheet into dataframe, and rbind
    
    dfs <- readWorksheet(loadWorkbook("../Data/Data.xlsx"),sheet=i)
    grade <- computeGrade(dfs[9,5])
    #grade <- computeGrade(dfs[7,3])

        #grade <- computeGrade(dfs[1,3])

    if (grade=='A')
        grades[1]=grades[1]+1
    else if (grade=='B')
        grades[2]=grades[2]+1
    else if (grade=='C')
        grades[3]=grades[3]+1
    else if (grade=='D')
        grades[4]=grades[4]+1
    else if (grade=='E')
        grades[5]=grades[5]+1
    else if (grade=='F')
        grades[6]=grades[6]+1
    else 
        grades[7]=grades[7]+1
    
}

@

\begin{figure}[H]
  \begin{center}
<<out.width='.57\\linewidth',echo=FALSE,warning=FALSE,message=FALSE>>=
gradesC <- c('A','B','C','D','E','F','NS')
df <- data.frame(Grade=gradesC,Count=grades)

library(ggplot2)
# Basic barplot
p<-ggplot(data=df, aes(x=Grade, y=Count)) +
  geom_bar(stat="identity")+theme_bw()
p

@

\caption{Distribution of student's grades}
\label{fig1}
\end{center}
\end{figure}


\clearpage
<<warning=FALSE,message=FALSE,eval=FALSE,echo=FALSE,results='asis'>>=


# Sheets names 
fileName <- '../Data/Data.xlsx'
sheets <- readxl::excel_sheets(fileName)
#length(sheets)

# Read 1st sheet and delete 2nd row



dfSheets <- data.frame(Sheet=character(), Rows=numeric(),Cols=numeric(),
                       Subject=numeric(),Type=character(),Weight=numeric())


dfs <- readWorksheet(loadWorkbook("../Data/Data.xlsx"),sheet=1)

library(xtable)
#print(xtable(dfs))

results<-xtable(dfs,label="one",caption=sheets[1])

grade <- computeGrade(dfs[9,5])
#grade <- computeGrade(dfs[7,3])

cat("\\huge{", sheets[1] ,"} | Grade:","\\huge ",grade,"\\normalsize")



 print(xtable(dfs,
                      label="1",
                      align = "llp{10cm}lll"),include.rownames=FALSE)
 
for (i in 2:length(sheets)) {
    # read sheet into dataframe, and rbind
    df <- readWorksheet(loadWorkbook("../Data/Data.xlsx"),sheet=1)
    df <- na.omit(df)
    
    
}

@
\newpage 

<<warning=FALSE,message=FALSE,eval=TRUE,echo=FALSE,results='asis'>>=


# Sheets names 
fileName <- '../Data/Data.xlsx'
sheets <- readxl::excel_sheets(fileName)
#length(sheets)

# Read 1st sheet and delete 2nd row



dfSheets <- data.frame(Sheet=character(), Rows=numeric(),Cols=numeric(),
                       Subject=numeric(),Type=character(),Weight=numeric())


dfs <- readWorksheet(loadWorkbook("../Data/Data.xlsx"),sheet=1)

dfsAll <- dfs[1,]
for (i in 1:length(sheets)) {
    # read sheet into dataframe, and rbind
    
    dfs <- readWorksheet(loadWorkbook("../Data/Data.xlsx"),sheet=i)
    dfsAll[nrow(dfsAll)+1, ] <- c(dfs[i,1],dfs[i,2],dfs[i,3],dfs[i,4],dfs[i,5])
            # uncomment to compute total grades for both parts 
    #grade <- computeGrade(dfs[7,3])
    #grade <- computeGrade(dfs[1,3])
    grade <- computeGrade(dfs[9,5])

    cat("\\huge{", sheets[i] ,"} | Grade:","\\huge ",grade,"\\normalsize")

    
    print(xtable(dfs,
                      label="i",
                      align = "llp{10cm}lll"),include.rownames=FALSE)  
        cat("\n\n\\pagebreak\n")

    
        }

write.csv(dfsAll,'feedback.csv')
@


\end{document}